// generated by cdk8s
import { ApiObject, ApiObjectMetadata, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';


/**
 *
 *
 * @schema StorageNotification
 */
export class StorageNotification extends ApiObject {
  /**
   * Returns the apiVersion and kind for "StorageNotification"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'storage.cnrm.cloud.google.com/v1beta1',
    kind: 'StorageNotification',
  }

  /**
   * Renders a Kubernetes manifest for "StorageNotification".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: StorageNotificationProps): any {
    return {
      ...StorageNotification.GVK,
      ...toJson_StorageNotificationProps(props),
    };
  }

  /**
   * Defines a "StorageNotification" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: StorageNotificationProps) {
    super(scope, id, {
      ...StorageNotification.GVK,
      ...props,
    });
  }

  /**
   * Renders the object to Kubernetes JSON.
   */
  public toJson(): any {
    const resolved = super.toJson();

    return {
      ...StorageNotification.GVK,
      ...toJson_StorageNotificationProps(resolved),
    };
  }
}

/**
 * @schema StorageNotification
 */
export interface StorageNotificationProps {
  /**
   * @schema StorageNotification#metadata
   */
  readonly metadata?: ApiObjectMetadata;

  /**
   * @schema StorageNotification#spec
   */
  readonly spec: StorageNotificationSpec;

}

/**
 * Converts an object of type 'StorageNotificationProps' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageNotificationProps(obj: StorageNotificationProps | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'metadata': obj.metadata,
    'spec': toJson_StorageNotificationSpec(obj.spec),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StorageNotificationSpec
 */
export interface StorageNotificationSpec {
  /**
   * @schema StorageNotificationSpec#bucketRef
   */
  readonly bucketRef: StorageNotificationSpecBucketRef;

  /**
   * Immutable.  A set of key/value attribute pairs to attach to each Cloud Pub/Sub message published for this notification subscription.
   *
   * @schema StorageNotificationSpec#customAttributes
   */
  readonly customAttributes?: { [key: string]: string };

  /**
   * Immutable. List of event type filters for this notification config. If not specified, Cloud Storage will send notifications for all event types. The valid types are: "OBJECT_FINALIZE", "OBJECT_METADATA_UPDATE", "OBJECT_DELETE", "OBJECT_ARCHIVE".
   *
   * @schema StorageNotificationSpec#eventTypes
   */
  readonly eventTypes?: string[];

  /**
   * Immutable. Specifies a prefix path filter for this notification config. Cloud Storage will only send notifications for objects in this bucket whose names begin with the specified prefix.
   *
   * @schema StorageNotificationSpec#objectNamePrefix
   */
  readonly objectNamePrefix?: string;

  /**
   * Immutable. The desired content of the Payload. One of "JSON_API_V1" or "NONE".
   *
   * @schema StorageNotificationSpec#payloadFormat
   */
  readonly payloadFormat: string;

  /**
   * Immutable. Optional. The service-generated notificationId of the resource. Used for acquisition only. Leave unset to create a new resource.
   *
   * @schema StorageNotificationSpec#resourceID
   */
  readonly resourceId?: string;

  /**
   * @schema StorageNotificationSpec#topicRef
   */
  readonly topicRef: StorageNotificationSpecTopicRef;

}

/**
 * Converts an object of type 'StorageNotificationSpec' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageNotificationSpec(obj: StorageNotificationSpec | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'bucketRef': toJson_StorageNotificationSpecBucketRef(obj.bucketRef),
    'customAttributes': ((obj.customAttributes) === undefined) ? undefined : (Object.entries(obj.customAttributes).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {})),
    'eventTypes': obj.eventTypes?.map(y => y),
    'objectNamePrefix': obj.objectNamePrefix,
    'payloadFormat': obj.payloadFormat,
    'resourceID': obj.resourceId,
    'topicRef': toJson_StorageNotificationSpecTopicRef(obj.topicRef),
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StorageNotificationSpecBucketRef
 */
export interface StorageNotificationSpecBucketRef {
  /**
   * Allowed value: The `name` field of a `StorageBucket` resource.
   *
   * @schema StorageNotificationSpecBucketRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema StorageNotificationSpecBucketRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema StorageNotificationSpecBucketRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'StorageNotificationSpecBucketRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageNotificationSpecBucketRef(obj: StorageNotificationSpecBucketRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

/**
 * @schema StorageNotificationSpecTopicRef
 */
export interface StorageNotificationSpecTopicRef {
  /**
   * Allowed value: string of the format `projects/{{project}}/topics/{{value}}`, where {{value}} is the `name` field of a `PubSubTopic` resource.
   *
   * @schema StorageNotificationSpecTopicRef#external
   */
  readonly external?: string;

  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   *
   * @schema StorageNotificationSpecTopicRef#name
   */
  readonly name?: string;

  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   *
   * @schema StorageNotificationSpecTopicRef#namespace
   */
  readonly namespace?: string;

}

/**
 * Converts an object of type 'StorageNotificationSpecTopicRef' to JSON representation.
 */
/* eslint-disable max-len, quote-props */
export function toJson_StorageNotificationSpecTopicRef(obj: StorageNotificationSpecTopicRef | undefined): Record<string, any> | undefined {
  if (obj === undefined) { return undefined; }
  const result = {
    'external': obj.external,
    'name': obj.name,
    'namespace': obj.namespace,
  };
  // filter undefined values
  return Object.entries(result).reduce((r, i) => (i[1] === undefined) ? r : ({ ...r, [i[0]]: i[1] }), {});
}
/* eslint-enable max-len, quote-props */

